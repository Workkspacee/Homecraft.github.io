<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Measurement</title>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- jQuery UI CSS -->
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <!-- jQuery UI JS -->
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>

    <link rel="stylesheet" href="/Quotation.css">

    <style>
        .table-container {
            width: 100%;
            overflow-x: auto;
        }

        table {
            width: 100%;
            table-layout: fixed;
            word-wrap: break-word;
        }

        .table_cell {
            width: 100%;
            box-sizing: border-box;
        }

        /* For auto selction list */ 
        
        .autocomplete-list {
            position: absolute;
            z-index: 9999;
            background: white;
            border: 1px solid #ccc;
            list-style: none;
            padding: 0;
            margin: 0;
            max-height: 200px;
            overflow-y: auto;
        }
        .autocomplete-list li {
            padding: 6px 10px;
            cursor: pointer;
        }
        .autocomplete-list li:hover,
        .autocomplete-list li.selected {
            background-color: #eee;
        }

        /* Hover-only Dropdown Arrow */ 

        .custom-select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }

        .hover-arrow {
            appearance: none;
        }

        .hover-arrow:hover {
            appearance: auto;
        }

    </style> 

    <script> // For calculation 
    $(document).ready(function () {
        function calculateFabricRequirement(curtainType, width, height) {
            if (!curtainType || curtainType.trim() === "") {
                return 0;
            }
            if (curtainType.toLowerCase() === "roman") {
                return Math.ceil(((height + 12) / 39) * Math.ceil(width / 50) * 4) / 4;
            } else {
                return Math.ceil(((height + 12) / 39) * Math.ceil(width / 20) * 4) / 4;
            }
        }

        function updateTotals() {
            let totalFabric = 0;
            let totalBlackout = 0;
            let roman = 0;
            let american = 0;
            let ring = 0;

            // Get arrays of all inputs by their names (jQuery returns array-like objects)
            const curtains = $("select[name='curtain[]'], input[name='curtain[]']");
            const widths = $("input[name='width[]']");
            const heights = $("input[name='height[]']");
            const blackouts = $("input[name='blackout[]']");
            const fabricReqs = $("input[name='fabric_req[]']");
            const blackoutReqs = $("input[name='blackout_req[]']");

            // Loop through all rows based on curtains.length
            for (let i = 0; i < curtains.length; i++) {
                let curtainType = $(curtains[i]).val();
                let width = parseFloat($(widths[i]).val()) || 0;
                let height = parseFloat($(heights[i]).val()) || 0;
                let blackout = $(blackouts[i]).val().trim();

                let fabricReq = calculateFabricRequirement(curtainType, width, height);
                fabricReq = isNaN(fabricReq) ? 0 : fabricReq;

                $(fabricReqs[i]).val(fabricReq > 0 ? fabricReq.toFixed(2) : "");

                // If blackout is checked/non-empty, blackout_req equals fabricReq, else zero
                let blackoutReq = blackout !== "" ? fabricReq : 0;
                blackoutReq = isNaN(blackoutReq) ? 0 : blackoutReq;

                $(blackoutReqs[i]).val(blackout !== "" && blackoutReq > 0 ? blackoutReq.toFixed(2) : "");

                totalFabric += fabricReq;
                totalBlackout += blackoutReq;

                // Total parts calculations:
                let type = (curtainType || "").toLowerCase();
                if (type === "roman") {
                    roman += (width * height) / 144;
                }
                if (type === "american") {
                    american += Math.ceil(width / 20);
                }
                if (type === "ring") {
                    ring += Math.ceil(width / 20);
                }
            }

            // Update total fields â€” adjust selectors if needed
            $("#roman").val(roman.toFixed(2));
            $("#american").val(american);
            $("#ring").val(ring);
            $("input[name='total_fab_req']").val(totalFabric.toFixed(2));
            $("input[name='total_black_req']").val(totalBlackout.toFixed(2));
        }

        // Event listeners on dynamic inputs
        $(document).on("input change", "input[name='width[]'], input[name='height[]'], select[name='curtain[]'], input[name='blackout[]']", function () {
            updateTotals();
        });

        // Run initially
        updateTotals();
    });
    </script>

    <script> // For auto completing
        let fabricsData = [];

        $(document).ready(function () {
        // Load fabric data once
        $.getJSON("/fabrics.json", function (data) {
            fabricsData = data;
        });

        function isFuzzyMatch(str, pattern) {
            let i = 0, j = 0;
            while (i < str.length && j < pattern.length) {
            if (str[i] === pattern[j]) j++;
            i++;
            }
            return j === pattern.length;
        }

        function scrollItemIntoView($item, $list) {
            const listTop = $list.scrollTop();
            const listBottom = listTop + $list.height();
            const itemTop = $item.position().top + listTop;
            const itemBottom = itemTop + $item.outerHeight();

            if (itemBottom > listBottom) {
            $list.scrollTop(itemBottom - $list.height());
            } else if (itemTop < listTop) {
            $list.scrollTop(itemTop);
            }
        }

        // Use event delegation to attach autocomplete on any fabric input (array-style)
        $(document).on("input", "input[name='fabric[]']", function () {
            const $input = $(this);
            const query = $input.val().toLowerCase();
            let currentIndex = -1;

            // Find related rate, hsn, gst inputs in the same row
            const $row = $input.closest("tr");
            const $rate = $row.find("input[name='rate[]']");
            const $hsn = $row.find("input[name='hsn[]']");
            const $gst = $row.find("input[name='gst[]']");

            if (!query) {
            $rate.val('');
            $hsn.val('');
            $gst.val('');
            $(".autocomplete-list").remove();
            return;
            }

            // Exact match autofill
            const exactMatch = fabricsData.find(item => item.name.toLowerCase() === query);
            if (exactMatch) {
            $rate.val(exactMatch.rate);
            $hsn.val(exactMatch.hsn);
            $gst.val(exactMatch.gst);
            $(".autocomplete-list").remove();
            return;
            }

            // Filter and prioritize results
            const results = fabricsData
            .map(item => {
                const name = item.name.toLowerCase();
                if (name.startsWith(query)) {
                return { ...item, priority: 1 };
                } else if (name.includes(query)) {
                return { ...item, priority: 2 };
                } else if (isFuzzyMatch(name, query)) {
                return { ...item, priority: 3 };
                } else {
                return null;
                }
            })
            .filter(Boolean)
            .sort((a, b) => a.priority - b.priority);

            // Build and show list near current input
            $(".autocomplete-list").remove();
            if (results.length === 0) return;

            const $list = $("<ul>").addClass("autocomplete-list");
            results.forEach((item, index) => {
            const $item = $("<li>").text(item.name);
            $item.attr("data-index", index);
            $item.on("click", function () {
                $input.val(item.name);
                $rate.val(item.rate);
                $hsn.val(item.hsn);
                $gst.val(item.gst);
                $(".autocomplete-list").remove();
            });
            $list.append($item);
            });
            $input.after($list);

            // Keyboard navigation inside the autocomplete list
            $input.off("keydown.autocomplete").on("keydown.autocomplete", function (e) {
            const $items = $list.find("li");
            if ($items.length === 0) return;

            if (e.key === "ArrowDown") {
                currentIndex = (currentIndex + 1) % $items.length;
                $items.removeClass("selected");
                const $current = $items.eq(currentIndex).addClass("selected");
                scrollItemIntoView($current, $list);
                e.preventDefault();
            } else if (e.key === "ArrowUp") {
                currentIndex = (currentIndex - 1 + $items.length) % $items.length;
                $items.removeClass("selected");
                const $current = $items.eq(currentIndex).addClass("selected");
                scrollItemIntoView($current, $list);
                e.preventDefault();
            } else if (e.key === "Enter" && currentIndex >= 0) {
                $items.eq(currentIndex).click();
                e.preventDefault();
            }
            });
        });

        // Close autocomplete list when clicking outside
        $(document).on("click", function (e) {
            if (!$(e.target).closest(".autocomplete-list, input[name='fabric[]']").length) {
            $(".autocomplete-list").remove();
            }
        });
        });
    </script>

    <script> //for colour in type of curtain 
        function updateCurtainColor(selectElement) {
            const td = selectElement.closest('td');
            const value = selectElement.value;

            // Clear existing background
            td.style.backgroundColor = '';

            // Set background based on value
            if (value === 'American') {
                td.style.backgroundColor = 'rgb(239, 239, 95)';
            } else if (value === 'Ring') {
                td.style.backgroundColor = 'rgb(106, 170, 106)';
            } else if (value === 'Roman') {
                td.style.backgroundColor = 'rgba(79, 140, 221, 0.824)';
            }
        }

        // Trigger the color update on page load for pre-selected options
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.curtain-select').forEach(select => {
                updateCurtainColor(select);
            });
        });
    </script>


</head>

<body>

    <div class="header1">
        <nav>
            <img src="/logo.png" alt="logo">
            <h3 style="font-weight: 700;"><a href="/logout">Log out</a></h3>
        </nav>
    </div>

    <div class="container">
        <div class="row jumbotron">            
            <form class="login" method="post">   
                <input type="hidden" name="redirect_to" value="measurement"><!--For using same routes but open different page-->
                <input type="hidden" name="forback" value="backend">
                <div class="row">                 
                <!-- Work order number -->
                <div class="col-2 login__field">
                    <h6 align="center">Work order number:</h6>
                </div>  
                <div class="col-1"></div> 
                <div class="col-3 login__field">
                    <input type="text" class="login__input" name="work_no" value="<%= no.work_no %>" readonly />
                </div>

                <!-- Name -->
                <div class="col-2 login__field">
                    <h6 align="center">Name:</h6>
                </div>  
                <div class="col-1"></div> 
                <div class="col-3 login__field">
                    <input type="text" class="login__input" name="name" value="<%= no.name %>" readonly />
                </div>

                <!-- Date -->
                <div class="col-2 login__field">
                    <h6 align="center">Date:</h6>
                </div>  
                <div class="col-1"></div> 
                <div class="col-3 login__field">
                    <input type="date" class="login__input" name="date" <% if (no.date) { %> value="<%= no.date.toISOString().split('T')[0] %>" <% } %> readonly />
                </div>

                <!-- Phone no. -->
                <div class="col-2 login__field">
                    <h6 align="center">Phone no.:</h6>
                </div>  
                <div class="col-1"></div> 
                <div class="col-3 login__field">
                    <input type="text" class="login__input" name="p_no" value="<%= no.p_no %>" readonly />
                </div>

                <!-- Delivery Date -->
                <div class="col-2 login__field">
                    <h6 align="center">Delivery Date:</h6>
                </div>  
                <div class="col-1"></div> 
                <div class="col-3 login__field">
                    <input type="date" class="login__input" name="d_date" <% if (no.d_date) { %> value="<%= no.d_date.toISOString().split('T')[0] %>" <% } %> readonly />
                </div>

                <!-- Force next element to new line -->
                <div class="w-100"></div>

                <!-- Address -->
                <div class="col-2 login__field mt-2">
                    <h6 align="center">Address:</h6>
                </div>
                <div class="col-10 login__field mt-2">
                    <input type="text" class="login__input" name="add" value="<%= no.add %>" readonly />
                </div>
            </div>
    
                <br/> <br/>
                <div class="row">
                    <div class="col-4"></div>
                    <div class="col-4">
                        <h3>Measurement Table</h3>  
                    </div>
                    <div class="col-4"></div>
                </div>    <br/>
                <div class="table-container">
                    <table class="table table-hover table-bordered">
                        <thead class="table1">
                            <tr>
                                <th>Room No.</th>
                                <th>Room Name</th>
                                <th>Window Number</th>
                                <th>Type of Curtain</th>
                                <th>Width (in)</th>
                                <th>Height (in)</th>
                                <th>Fabric</th>
                                <th>Fabric Required (meter)</th>
                                <th>Blackout</th>
                                <th>Blackout Required (meter)</th>
                            </tr>
                        </thead>                                        
                         <tbody id="tableBody">
                            <% if (no && no.rows && no.rows.length > 0) { %>
                               <% for (let i = 0; i < no.rows.length; i++) { const row = no.rows[i]; %>

                                <tr class="data-row">
                                    <td><input type="number" class="table_cell" name="room_number[]" step="any" value="<%= row.room_number ?? '' %>"></td>
                                    <td><input type="text" class="table_cell" name="room_name[]"  value="<%= row.room_name %>"></td>
                                    <td><input type="number" class="table_cell" name="window_number[]" step="any" value="<%= row.window_number ?? '' %>"></td>
                                    <td class="curtain-cell">
                                        <select name="curtain[]" class="table_cell hover-arrow curtain-select" onchange="updateCurtainColor(this)">
                                            <option value=""></option>
                                            <option value="American" <%= row.curtain === 'American' ? 'selected' : '' %>>American</option>
                                            <option value="Ring" <%= row.curtain === 'Ring' ? 'selected' : '' %>>Ring</option>
                                            <option value="Roman" <%= row.curtain === 'Roman' ? 'selected' : '' %>>Roman</option>
                                        </select>
                                    </td>
                                    <td><input type="number" class="table_cell" step="any" name="width[]" value="<%= row.width ?? '' %>"></td>
                                    <td><input type="number" class="table_cell" step="any" name="height[]" value="<%= row.height ?? '' %>"></td>
                                    <td><input type="text" class="table_cell" name="fabric[]" value="<%= row.fabric %>" autocomplete="off" ></td>
                                    <td><input type="number" class="table_cell" step="any" name="fabric_req[]" value="<%= row.fabric_req ?? '' %>"></td>
                                    <td><input type="number" class="table_cell" step="any" name="blackout[]" value="<%= row.blackout ?? '' %>"></td>
                                    <td><input type="number" class="table_cell" step="any" name="blackout_req[]" value="<%= row.blackout_req ?? '' %>"></td>
                                    <td><input type="number" name="rate[]" step="any" value="<%= row.rate ?? '' %>"></td>
                                    <td><input type="number" name="hsn[]" step="any" value="<%= row.hsn ?? '' %>"></td>
                                    <td><input type="number" name="gst[]" step="any" value="<%= row.gst ?? '' %>"></td>
                                    <td><button type="button" class="add-row">Add Row</button> <button type="button" class="delete-row">Delete Row</button></td>
                                </tr>
                            <% } %>
                            <% } else { %>
                                <tr class="data-row">
                                    <td><input class="table_cell" step="any" type="number" name="room_number[]"></td>
                                    <td><input class="table_cell"  type="text" name="room_name[]"></td>
                                    <td><input class="table_cell" step="any" type="number" name="window_number[]"></td>
                                    <td>
                                        <select class="table_cell hover-arrow" name="curtain[]">
                                            <option></option>
                                            <option value="American">American</option>
                                            <option value="Ring">Ring</option>
                                            <option value="Roman">Roman</option>
                                        </select>
                                    </td>
                                    <td><input class="table_cell" type="number" step="any" name="width[]"></td>
                                    <td><input class="table_cell" type="number" step="any" name="height[]"></td>
                                    <td><input class="table_cell" type="text" name="fabric[]" autocomplete="off"></td>
                                    <td><input class="table_cell" type="number" step="any" name="fabric_req[]"></td>
                                    <td><input class="table_cell" type="number" step="any" name="blackout[]"></td>
                                    <td><input class="table_cell" type="number" step="any" name="blackout_req[]"></td>
                                    <td><input type="number" step="any" name="rate[]"></td>
                                    <td><input type="number" step="any" name="hsn[]"></td>
                                    <td><input type="number" step="any" name="gst[]"></td>
                                    <td><button type="button" class="add-row">Add Row</button> <button type="button" class="delete-row">Delete Row</button></td>
                                </tr>   
                            <% } %>

                            <tr class="summary-row">
                            <td></td>
                            <td>Total Parts</td>
                            <td></td>
                            <td style="background-color: rgba(79, 140, 221, 0.824);">
                                <input type="number" id="roman" name="roman" class="login__input" value="<%= no.roman %>" readonly>
                            </td>
                            <td style="background-color: rgb(239, 239, 95);"><input type="number" id="american" name="american" class="login__input" value="<%= no.american %>" readonly></td>
                            <td style="background-color: rgb(106, 170, 106);"><input type="number" id="ring" name="ring" class="login__input" value="<%= no.ring %>" readonly></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            </tr>

                            <tr class="summary-row">
                            <td></td>
                            <td>Total Fabrics</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td>
                                <input type="number" step="any" class="login__input" name="total_fab_req"  value="<%= no.total_fab_req %>" readonly>
                            </td>
                            <td></td>
                            <td>
                                <input type="number" step="any" class="login__input" name="total_black_req"  value="<%= no.total_black_req %>" readonly>
                            </td> 
                            </tr>
                        </tbody> 
                    </table><br/><br/>
                    
                    <hr>

                    <div class="d-flex justify-content-between align-items-center my-3">
                        <h4>Quotation Table</h4>
                        <button type="button" class="btn btn-primary" id="autofillQuotationBtn">Autofill Quotation</button>
                    </div>
                    <div class="table-container">
                        <table class="table table-hover table-bordered" id="quotationTable">
                            <thead class="table-secondary table1">
                                <tr>
                                <th>Sr No.</th>
                                <th>Material</th>
                                <th>Meters / Sq.Ft.</th>
                                <th>Rate</th>
                                <th>Discount (%)</th>
                                <th>Sub Total</th>
                                <th>GST (%)</th>
                                <th>Grand Total</th>
                                <th>HSN (Check)</th>    
                                <th>Action</th>
                                </tr>
                            </thead>
                            <tbody> <!-- Hidden row -->
                                <tr class="quotation-template-row d-none">
                                    <td class="sr-no">1</td>
                                    <td><input type="text" class="material-input" step="any" name="material[]"></td>
                                    <td><input type="number" class="qty" step="any" name="qty[]"></td>
                                    <td><input type="number" class="q_rate" step="any" name="q_rate[]"></td>
                                    <td><input type="number" class="discount" step="any" name="discount[]"></td>
                                    <td><input type="number" class="sub_total" step="any" name="sub_total[]" ></td>
                                    <td><input type="number" class="q_gst" step="any" name="q_gst[]"></td>
                                    <td><input type="number" class="grand_total" step="any" name="grand_total[]" ></td>
                                    <td><input type="text" class="q_hsn" step="any" name="q_hsn[]"></td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-success add-quotation-row">+</button>
                                        <button type="button" class="btn btn-sm btn-danger delete-quotation-row">âˆ’</button>
                                        <input type="checkbox" class="include-in-bill" name="include_in_bill[]">
                                    </td>
                                </tr>
                            </tbody>

                            <tbody id="quotationTableBody">
                                <% if (no.quotation && no.quotation.length > 0) { %>
                                    <% no.quotation.forEach((q, index) => { %>
                                    <tr>

                                        <td class="sr-no"><%= index + 1 %></td>
                                        <td><input type="text" class="material-input table_cell" step="any" name="material[]" value="<%= q.material %>"></td>
                                        <td><input type="number" class="qty table_cell" step="any" name="qty[]" value="<%= q.qty %>"></td>
                                        <td><input type="number" class="q_rate table_cell" step="any" name="q_rate[]" value="<%= q.q_rate %>"></td>
                                        <td><input type="number" class="discount table_cell" step="any" name="discount[]" value="<%= q.discount %>"></td>
                                        <td><input type="number" class="sub_total table_cell" step="any" name="sub_total[]" value="<%= q.sub_total %>" ></td>
                                        <td><input type="number" class="q_gst table_cell" step="any" name="q_gst[]" value="<%= q.q_gst %>"></td>
                                        <td><input type="number" class="grand_total table_cell" step="any" name="grand_total[]" value="<%= q.grand_total %>" ></td>
                                        <td><input type="text" class="q_hsn table_cell" step="any" name="q_hsn[]" value="<%= q.q_hsn %>"></td>
                                        <td>
                                        <button type="button" class="btn btn-sm btn-success add-quotation-row">+</button>
                                        <button type="button" class="btn btn-sm btn-danger delete-quotation-row">âˆ’</button>
                                        <input type="checkbox" class="include-in-bill" name="include_in_bill[]" value="<%= index %>">
                                        </td>
                                    </tr>
                                    <% }) %>
                                <% } else { %>
                                    <!-- Show one empty row if no data -->
                                    <tr>
                                        <td class="sr-no">1</td>
                                        <td><input type="text" class="material-input table_cell" step="any" name="material[]"></td>
                                        <td><input type="number" class="qty table_cell" step="any" name="qty[]"></td>
                                        <td><input type="number" class="q_rate table_cell" step="any" name="q_rate[]"></td>
                                        <td><input type="number" class="discount table_cell" step="any" name="discount[]" value="0"></td>
                                        <td><input type="number" class="sub_total table_cell" step="any" name="sub_total[]" ></td>
                                        <td><input type="number" class="q_gst table_cell" step="any" name="q_gst[]" value="0"></td>
                                        <td><input type="number" class="grand_total table_cell" step="any" name="grand_total[]" ></td>
                                        <td><input type="text" class="q_hsn table_cell" step="any" name="q_hsn[]"></td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-success add-quotation-row">+</button>
                                            <button type="button" class="btn btn-sm btn-danger delete-quotation-row">âˆ’</button>
                                            <input type="checkbox" class="include-in-bill" name="include_in_bill[]" value="<%= index %>">                                    
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                            <tfoot>
                                <tr class="table-warning">
                                <td colspan="7" class="text-end"><strong>Total Grand Total</strong></td>
                                <td><input type="number" id="totalQuotationGrand" name="totalQuotationGrand" class="form-control table_cell" readonly></td>
                                <td colspan="2"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <!-- Save Button -->
                    <div class="text-end my-3">
                    <button type="submit" class="submit" class="btn btn-success" formaction="/measure-save" > Save </button>
                    <button type="submit" class="submit" class="btn btn-success" formaction="/bill" > Bill </button>
                    <button type="submit" class="submit" class="btn btn-success" formaction="/back" > Back </button>                    
                    </div>

                </div>
            </form>
        </div>
    </div>
</body>

<script>
$(document).ready(function () {
    const $tableBody = $('#tableBody');

    // Function to clear inputs/selects in a row
    function clearRowInputs($row) {
        $row.find('input, select').each(function () {
            if (this.tagName === 'SELECT') {
                $(this).val(''); // clear select
            } else {
                $(this).val(''); // clear input
            }
        });
    }

    // Add new row
    $tableBody.on('click', '.add-row', function () {
        const $currentRow = $(this).closest('tr');
        const $newRow = $currentRow.clone(false); // clone without event handlers

        clearRowInputs($newRow);

        $newRow.insertAfter($currentRow);

        // If you have an autocomplete function for fabric or other inputs, call it here
        if (typeof attachAutocomplete === 'function') {
            attachAutocomplete($newRow);
        }

        // Focus first input in new row for better UX
        $newRow.find('input, select').first().focus();

        updateDeleteButtonState();
    });

    // Delete row
    $tableBody.on('click', '.delete-row', function () {
        const $rows = $tableBody.find('tr.data-row');
        if ($rows.length > 1) {
            $(this).closest('tr').remove();
        }
        updateDeleteButtonState();
    });

    // Disable Delete buttons if only one row left
    function updateDeleteButtonState() {
        const $rows = $tableBody.find('tr.data-row');
        if ($rows.length <= 1) {
            $rows.find('.delete-row').prop('disabled', true);
        } else {
            $rows.find('.delete-row').prop('disabled', false);
        }
    }

    // Initial call to set button state
    updateDeleteButtonState();

});

</script>

<script> // for quotation table 
let fabricData = [];

    function isFuzzyMatch(str, pattern) {
        let i = 0, j = 0;
        while (i < str.length && j < pattern.length) {
            if (str[i] === pattern[j]) j++;
            i++;
        }
        return j === pattern.length;
    }

    function scrollItemIntoView($item, $list) {
        const listTop = $list.scrollTop();
        const listBottom = listTop + $list.height();
        const itemTop = $item.position().top + listTop;
        const itemBottom = itemTop + $item.outerHeight();

        if (itemBottom > listBottom) {
            $list.scrollTop(itemBottom - $list.height());
        } else if (itemTop < listTop) {
            $list.scrollTop(itemTop);
        }
    }

    // Define the function OUTSIDE so it is globally accessible
    function bindMaterialAutocomplete() {
        $(document).off("input.autocompleteQuotation").on("input.autocompleteQuotation", "input.material-input", function () {
            const $input = $(this);
            const query = $input.val().toLowerCase();
            let currentIndex = -1;

            const $row = $input.closest("tr");
            const $rate = $row.find(".q_rate");
            const $gst = $row.find(".q_gst");
            const $hsn = $row.find(".q_hsn");

            if (!query) {
                $rate.val('');
                $gst.val('');
                $hsn.val('');
                $(".autocomplete-list").remove();
                return;
            }

            const exactMatch = fabricData.find(item => item.name.toLowerCase() === query);
            if (exactMatch) {
                $rate.val(exactMatch.rate);
                $gst.val(exactMatch.gst);
                $hsn.val(exactMatch.hsn);
                $(".autocomplete-list").remove();
                return;
            }

            const results = fabricData
                .map(item => {
                    const name = item.name.toLowerCase();
                    if (name.startsWith(query)) return { ...item, priority: 1 };
                    else if (name.includes(query)) return { ...item, priority: 2 };
                    else if (isFuzzyMatch(name, query)) return { ...item, priority: 3 };
                    else return null;
                })
                .filter(Boolean)
                .sort((a, b) => a.priority - b.priority);

            $(".autocomplete-list").remove();
            if (results.length === 0) return;

            const $list = $("<ul>").addClass("autocomplete-list");
            results.forEach((item, index) => {
                const $item = $("<li>").text(item.name).attr("data-index", index);
                $item.on("click", function () {
                    $input.val(item.name);
                    $rate.val(item.rate);
                    $gst.val(item.gst);
                    $hsn.val(item.hsn);
                    $(".autocomplete-list").remove();
                    calculateQuotationRow($row);
                });
                $list.append($item);
            });

            $input.after($list);

            $input.off("keydown.autocomplete").on("keydown.autocomplete", function (e) {
                const $items = $list.find("li");
                if ($items.length === 0) return;

                if (e.key === "ArrowDown") {
                    currentIndex = (currentIndex + 1) % $items.length;
                    $items.removeClass("selected");
                    const $current = $items.eq(currentIndex).addClass("selected");
                    scrollItemIntoView($current, $list);
                    e.preventDefault();
                } else if (e.key === "ArrowUp") {
                    currentIndex = (currentIndex - 1 + $items.length) % $items.length;
                    $items.removeClass("selected");
                    const $current = $items.eq(currentIndex).addClass("selected");
                    scrollItemIntoView($current, $list);
                    e.preventDefault();
                } else if (e.key === "Enter" && currentIndex >= 0) {
                    $items.eq(currentIndex).click();
                    e.preventDefault();
                }
            });
        });
    }

    // Load fabrics.json and bind autocomplete once loaded
    $.getJSON('/fabrics.json', function (data) {
        fabricData = data;
        bindMaterialAutocomplete(); // initial binding
    });


    // The rest of your code remains unchanged:
    $(document).on('click', '.add-quotation-row', function () {
        const newRow = $('#quotationTableBody tr:first').clone();
        newRow.find('input').val('');
        $('#quotationTableBody').append(newRow);
        updateSrNo();
        bindMaterialAutocomplete();
    });

    $(document).on('click', '.delete-quotation-row', function () {
        const allRows = $('#quotationTableBody tr');
        if (allRows.length === 1) return;

        const row = $(this).closest('tr');
        const hasValue = row.find('input').filter(function () {
            return $(this).val().trim() !== '';
        }).length > 0;

        if (hasValue && allRows.length === 1) return;

        row.remove();
        updateSrNo();
        calculateTotalGrand();
    });

    function updateSrNo() {
        $('#quotationTableBody tr').each(function (index) {
            $(this).find('.sr-no').text(index + 1);
        });
    }

    $(document).on('input', '.qty, .q_rate, .discount, .q_gst', function () {
        const row = $(this).closest("tr");
        calculateQuotationRow(row);
    });

    function calculateQuotationRow(row) {
        const qty = parseFloat(row.find('.qty').val()) || 0;
        const rate = parseFloat(row.find('.q_rate').val()) || 0;
        const discount = parseFloat(row.find('.discount').val()) || 0;
        const gst = parseFloat(row.find('.q_gst').val()) || 0;

        let subTotal = qty * rate;
        subTotal -= (subTotal * discount / 100);
        let grandTotal = subTotal + (subTotal * gst / 100);

        row.find('.sub_total').val(subTotal.toFixed(2));
        row.find('.grand_total').val(grandTotal.toFixed(2));

        calculateTotalGrand();
    }

    function calculateTotalGrand() {
        let total = 0;
        $('.grand_total').each(function () {
            const val = parseFloat($(this).val());
            if (!isNaN(val)) total += val;
        });
        $('#totalQuotationGrand').val(total.toFixed(2));
    }

    $('#autofillQuotationBtn').on('click', function () {
        const fabricMap = {};
        const stitching = {
            roman: parseFloat($('#roman').val()) || 0,
            american: parseFloat($('#american').val()) || 0,
            ring: parseFloat($('#ring').val()) || 0
        };

        $('[name="fabric[]"]').each(function (i) {
            const name = $(this).val().trim();
            if (!name) return;
            const qty = parseFloat($('[name="fabric_req[]"]').eq(i).val()) || 0;
            const rate = parseFloat($('[name="rate[]"]').eq(i).val()) || 0;
            const gst = parseFloat($('[name="gst[]"]').eq(i).val()) || 0;
            const hsn = $('[name="hsn[]"]').eq(i).val() || '';

            if (fabricMap[name]) {
                fabricMap[name].qty += qty;
            } else {
                fabricMap[name] = { qty, rate, gst, hsn };
            }
        });

        $('#quotationTableBody').html('');

        // Inside $('#autofillQuotationBtn').on('click', function () {
        Object.entries(fabricMap).forEach(([material, data]) => {
            const newRow = $('.quotation-template-row').clone().removeClass('quotation-template-row d-none');
            newRow.find('input').val('');
            newRow.find('.material-input').val(material);
            newRow.find('.qty').val(data.qty.toFixed(2));
            newRow.find('.q_rate').val(data.rate);
            newRow.find('.q_gst').val(data.gst);
            newRow.find('.q_hsn').val(data.hsn);
            calculateQuotationRow(newRow);
            $('#quotationTableBody').append(newRow);
        });

        for (const [key, qty] of Object.entries(stitching)) {
            if (qty > 0) {
                const newRow = $('.quotation-template-row').clone().removeClass('quotation-template-row d-none');
                newRow.find('input').val('');
                newRow.find('.material-input').val(key.charAt(0).toUpperCase() + key.slice(1) + ' Stitching');
                newRow.find('.qty').val(qty);
                newRow.find('.q_rate').val(0); // Default rate
                newRow.find('.discount').val(0); // Default discount
                newRow.find('.q_gst').val(0); // Default GST
                newRow.find('.q_hsn').val(''); // Optional or blank
                calculateQuotationRow(newRow);
                $('#quotationTableBody').append(newRow);
            }
        }

        updateSrNo();
        bindMaterialAutocomplete();
        calculateTotalGrand();
    });

    $(document).on("click", function (e) {
        if (!$(e.target).closest(".autocomplete-list, input.material-input").length) {
            $(".autocomplete-list").remove();
        }
    });

    // Call it once on page load to initialize
    $(document).ready(function () {
        bindMaterialAutocomplete();
        $('#quotationTableBody tr').each(function () {
            calculateQuotationRow($(this));
        });
        updateSrNo();
    });

    //For Billing process with checkbox 
    function updateBillCheckboxIndices() {
    $('#quotationTableBody tr').each(function (i) {
        const checkbox = $(this).find("input.include-in-bill");
        if (checkbox.length) {
        checkbox.val(i);  // Always set correct index
        }
    });
    }

    $(document).ready(function () {
    updateBillCheckboxIndices();

    $(document).on('click', '.add-quotation-row, .delete-quotation-row', function () {
        setTimeout(updateBillCheckboxIndices, 10); // Delay ensures DOM is updated first
    });
    });
    
</script>

</html>